-- for postman tests
--DROP TABLE users CASCADE;
--DROP TABLE friends CASCADE;
--DROP TABLE films CASCADE;
--DROP TABLE likes CASCADE;
--DROP TABLE genres CASCADE;
--DROP TABLE ratings CASCADE;
--DROP TABLE film_genres CASCADE;

CREATE TABLE IF NOT EXISTS ratings (
  id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(32) NOT NULL
);

CREATE TABLE IF NOT EXISTS genres (
  id INTEGER PRIMARY KEY,
  name VARCHAR(32) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(64) NOT NULL,
    description VARCHAR(200),
    release_date date NOT NULL,
    duration INTEGER NOT NULL,
    rating_id INTEGER REFERENCES ratings(id),
    CHECK(duration > 0)
);

CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER REFERENCES films(id) NOT NULL,
    genre_id INTEGER REFERENCES genres(id) NOT NULL,
    UNIQUE(film_id, genre_id)
);


CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login VARCHAR(64) NOT NULL,
    name VARCHAR(64),
    email VARCHAR(64) NOT NULL,
    birthday DATE, CHECK(birthday <= CAST(now() AS DATE))
);

CREATE TABLE IF NOT EXISTS friends (
    user_id INTEGER REFERENCES users(id) NOT NULL,
    friend_id INTEGER REFERENCES users(id) NOT NULL,
    UNIQUE(user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS likes (
    film_id INTEGER REFERENCES films(id) NOT NULL,
    user_id INTEGER REFERENCES users(id) NOT NULL,
    UNIQUE(film_id, user_id)
);
